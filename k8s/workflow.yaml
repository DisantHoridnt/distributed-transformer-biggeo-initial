apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: etl-job-
spec:
  entrypoint: run-job
  serviceAccountName: etl-service-account  # Service account for basic pod operations
  
  # Workflow timeout
  activeDeadlineSeconds: 3600  # 1 hour timeout
  
  # Retry policy
  retryStrategy:
    limit: 3
    retryPolicy: "Always"
    backoff:
      duration: "10s"
      factor: 2
      maxDuration: "5m"
  
  arguments:
    parameters:
    - name: input_url
      value: s3://mybucket/input_data.parquet
    - name: output_url
      value: s3://mybucket/transformed_data.parquet
    - name: filter_sql
      value: "SELECT * FROM data WHERE some_column > 100"
    - name: image_tag
      value: "latest"  # Can be overridden when submitting workflow
  
  templates:
  - name: run-job
    inputs:
      parameters:
      - name: input_url
      - name: output_url
      - name: filter_sql
      - name: image_tag
    
    metadata:
      labels:
        app: etl-job
      annotations:
        sidecar.istio.io/inject: "false"  # Disable Istio sidecar if using Istio
    
    container:
      image: "rs_app/distributed-transformer:{{inputs.parameters.image_tag}}"
      imagePullPolicy: Always
      command: ["/app/distributed-transformer"]
      args:
        - "--input-url"
        - "{{inputs.parameters.input_url}}"
        - "--output-url"
        - "{{inputs.parameters.output_url}}"
        - "--filter-sql"
        - "{{inputs.parameters.filter_sql}}"
      
      # Resource limits and requests
      resources:
        requests:
          cpu: "1"
          memory: "2Gi"
        limits:
          cpu: "2"
          memory: "4Gi"
      
      # Environment variables
      env:
        - name: RUST_LOG
          value: "info"
        - name: DOTENV_PATH
          value: "/app/.env"
        - name: AWS_REGION
          valueFrom:
            configMapKeyRef:
              name: etl-config
              key: aws_region
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: access_key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: secret_key
        - name: AZURE_STORAGE_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: azure-credentials
              key: account
        - name: AZURE_STORAGE_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: azure-credentials
              key: access_key
      
      # Security context
      securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        allowPrivilegeEscalation: false
        capabilities:
          drop:
            - ALL
      
      # Liveness probe
      livenessProbe:
        httpGet:
          path: /health
          port: 8080
        initialDelaySeconds: 5
        periodSeconds: 10
        
      # Volume mounts for temporary storage
      volumeMounts:
        - name: tmp
          mountPath: /app/tmp
    
    volumes:
      - name: tmp
        emptyDir: 
          medium: Memory
          sizeLimit: 1Gi